YOU GUESSED IT I AM NOT THE ONE WHO WROTE THESE THANK YOU CHAT JIPPITY



Java Utilities Documentation

This documentation covers the following Java utilities:

langs.Bf – Brainfuck interpreter

langs.Js – JavaScript engine runner via GraalVM

printUtils.C – C-style printf implementation

printUtils.Cpp – C++-style cout implementation

1. langs.Bf

Purpose:
Bf is a minimal Brainfuck interpreter in Java. It supports two modes:

bf_at(String code) – All-time interpreter: (not yet implemented) intended to continue running Brainfuck code while maintaining state across multiple calls.

bf_sc(String code) – Single compute: executes Brainfuck code from a clean slate and returns the current memory cell value if # is used.

Implementation Details:

Memory tape:

int[] tape = new int[30000]; // standard Brainfuck tape size


Each cell is an int. Pointer wraps around edges.

Pointer movement:

'>' increments pointer, wraps at the end.

'<' decrements pointer, wraps at the beginning.

Arithmetic operations:

'+' increments cell

'-' decrements cell

Input/output:

'.' prints the current cell as a character.

',' reads a single byte from System.in.

Control flow:

'[' starts a loop; jumps past ] if cell is 0.

']' ends a loop; jumps back to [ if cell is not 0.

Special feature:

'#' returns the integer value of the current cell immediately and terminates the program.

2. langs.Js

Purpose:
Js allows running JavaScript code inside a Java application using GraalVM’s polyglot engine. It can execute both inline strings and files.

Main Methods:

js(String code) – Runs JavaScript code string.

jsFile(String path) – Reads a file from disk and runs it as JavaScript code.

Features:

ANSI-colored error reporting:

RED – Critical failure

YELLOW – Warning or recoverable error

GREEN – Success

Console input inside JS code:

Exposes a Java function readLine(prompt) to JavaScript.

Handles blank input with warnings and loops until valid input is provided.

Error handling:

PolyglotException is caught and classified as:

Syntax errors

Runtime errors in JS

Internal engine errors

Other exceptions (like file I/O) are caught separately.

Implementation Highlights:

Uses org.graalvm.polyglot.Context for JS execution.

Allows Java interop with .allowAllAccess(true).

Redirects JS console.log to Java System.out.

3. printUtils.C

Purpose:
A C-style printf implementation in Java.

Method:

public static void printf(String format, Object... args)


Features:

Supports %s, %d, %f formats.

Handles %% for literal %.

Prints directly to System.out.

Loops through the format string, replacing placeholders with argument values.

Implementation Notes:

Uses a String result to build the output.

Loops through format characters and processes each % token.

Designed to mimic C printf behavior while working in Java.

4. printUtils.Cpp

Purpose:
Implements C++-style cout printing in Java, supporting chaining of outputs.

Key Methods:

cout() – Returns a new instance of Cpp to start output chaining.

out(Object obj) – Prints an object and returns the same instance for chaining.

endl() – Prints a newline and returns the instance for chaining.

Usage Example:

Cpp.cout().out("Hello, ").out("world!").endl();


This prints Hello, world! and ends the line, mimicking C++ style.

Overall Notes on Implementation

The utilities aim to bring scripting and familiar programming constructs into Java:

Bf brings Brainfuck interpretation.

Js allows embedding and executing JavaScript.

C and Cpp provide C/C++-style console printing.

Focus is on ease-of-use and chaining:

Cpp supports infinite chaining of .out() and .endl().

Js provides a readLine() helper for interactive scripts.

Bf implements Brainfuck core functionality with standard memory tape.

Error handling and ANSI colors are included to improve debugging and user feedback.
